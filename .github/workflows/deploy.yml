name: 'Deploy'

on:
  push:
    branches:
      - main

jobs:
  build-tweet-lambda-package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: ./create_tweet_lambda_package.sh
      shell: bash
    - name: Upload Tweet Lambda Build Package
      uses: actions/upload-artifact@v3
      with:
        name: tweet_lambda_build
        path: tweet_youtube_video.zip

  build-youtube-lambda-package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: ./create_youtube_lambda_package.sh
      shell: bash
    - name: Upload Youtube Lambda Build Package
      uses: actions/upload-artifact@v3
      with:
        name: youtube_lambda_build
        path: youtube_video_generator.zip

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [build-tweet-lambda-package, build-youtube-lambda-package]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3

    # Configure AWS Creds PROD
    - name: Configure AWS Credentials Prod
      if: endsWith(github.ref, '/main')
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.$GITHUB_REF_NAME.conf
      continue-on-error: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      run: terraform apply --auto-approve -input=false
