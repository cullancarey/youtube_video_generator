name: 'Deploy'

on:
  push:
    branches:
      - main

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/${{ vars.DEPLOYMENT_ROLE}}
          role-session-name: docker-build-and-push-${{ vars.REGION }}-${{ vars.ACCOUNT_ID }}
          aws-region: ${{ vars.REGION }}

      - name: Build and Push Tweet Lambda Docker Image
        run: ./build_and_push_tweet.sh

      - name: Build and Push YouTube Lambda Docker Image
        run: ./build_and_push_youtube.sh

  terraform:
    name: 'Terraform'
    environment: production
    runs-on: ubuntu-latest
    needs: [build-and-push]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS Creds
    - name: Configure AWS Credentials 
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/${{ vars.DEPLOYMENT_ROLE}}
        role-session-name: terraform-deployment-${{ vars.REGION }}-${{ vars.ACCOUNT_ID }}
        aws-region: ${{ vars.REGION }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.$GITHUB_REF_NAME.conf
      continue-on-error: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

    - name: Terraform Apply
      if: "!contains(github.event.head_commit.message, '[tf-plan]')"
      id: apply
      run: terraform apply --auto-approve -input=false

    - name: Terraform Plan
      if: contains(github.event.head_commit.message, '[tf-plan]')
      id: plan
      run: terraform plan --input=false